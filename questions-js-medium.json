[
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function reverseString(str) {\n    for (let i = str.length; i >= 0; i--) {\n        reversed += str[i];\n    }\n    return reversed;\n}\nconsole.log(reverseString(\"hello\"));",
        "bug_description": [
            "1. 'reversed' is not defined before usage.",
            "2. Loop starts at 'str.length' but should be 'str.length - 1'.",
            "3. Loop should stop at i >= 0 but will run one extra iteration."
        ],
        "expected_fix": [
            "1. Declare 'let reversed = \"\";' before the loop.",
            "2. Change loop start from 'i = str.length' to 'i = str.length - 1'.",
            "3. Change loop condition to 'i >= 0' instead of 'i >= 0; i--'."
        ],
        "expected_output": "\"olleh\"",
        "check": "Expected output: \"olleh\""
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function factorial(n) {\n    if (n = 0) return 1;\n    return n * factorial(n - 1);\n}\nconsole.log(factorial(5));",
        "bug_description": [
            "1. Incorrect comparison 'n = 0', should be 'n === 0'.",
            "2. Missing base case check for negative numbers (causes infinite recursion)."
        ],
        "expected_fix": [
            "1. Replace 'n = 0' with 'n === 0'.",
            "2. Add 'if (n < 0) return \"Invalid input\";' to handle negatives."
        ],
        "expected_output": "120",
        "check": "Expected output: 120"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function isPalindrome(str) {\n    str = str.toLowerCase();\n    return str === str.reverse();\n}\nconsole.log(isPalindrome(\"racecar\"));",
        "bug_description": [
            "1. Strings do not have a 'reverse()' method.",
            "2. Needs to split, reverse, and join to check correctly."
        ],
        "expected_fix": [
            "1. Replace 'str.reverse()' with 'str.split('').reverse().join('')'."
        ],
        "expected_output": "true",
        "check": "Expected output: true"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function fibonacci(n) {\n    if (n <= 1) return n;\n    return fibonacci(n - 1) + fibonacci(n - 2);\n    let cache = {};\n}\nconsole.log(fibonacci(5));",
        "bug_description": [
            "1. 'cache' is declared but never used.",
            "2. No memoization, making the function inefficient for large inputs."
        ],
        "expected_fix": [
            "1. Implement memoization using an object to store computed values.",
            "2. Modify the function to check 'cache' before computing values."
        ],
        "expected_output": "5",
        "check": "Expected output: 5"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function findMax(arr) {\n    let max;\n    for (let i = 0; i < arr.length; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    return max;\n}\nconsole.log(findMax([2, 3, 10, 1]));",
        "bug_description": [
            "1. 'max' is not initialized properly (should be set to '-Infinity' initially).",
            "2. Function may return 'undefined' if all numbers are negative."
        ],
        "expected_fix": [
            "1. Change 'let max;' to 'let max = -Infinity;'."
        ],
        "expected_output": "10",
        "check": "Expected output: 10"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function sumArray(arr) {\n    let sum;\n    for (let i = 0; i <= arr.length; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\nconsole.log(sumArray([1, 2, 3, 4]));",
        "bug_description": [
            "1. 'sum' is not initialized (should be set to 0).",
            "2. Loop runs out of bounds (should be 'i < arr.length' instead of 'i <= arr.length')."
        ],
        "expected_fix": [
            "1. Change 'let sum;' to 'let sum = 0;'.",
            "2. Change 'i <= arr.length' to 'i < arr.length'."
        ],
        "expected_output": "10",
        "check": "Expected output: 10"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function countVowels(str) {\n    let count = 0;\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    for (char in str) {\n        if (vowels.includes(char)) {\n            count++;\n        }\n    }\n    return count;\n}\nconsole.log(countVowels(\"hello\"));",
        "bug_description": [
            "1. 'for...in' loops iterate over indexes, not characters.",
            "2. 'char' is an index, not the actual character."
        ],
        "expected_fix": [
            "1. Use 'for...of' loop instead of 'for...in'."
        ],
        "expected_output": "2",
        "check": "Expected output: 2"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function getEvenNumbers(arr) {\n    return arr.filter(num => num % 2);\n}\nconsole.log(getEvenNumbers([1, 2, 3, 4, 5, 6]));",
        "bug_description": [
            "1. The filter condition is incorrect ('num % 2' keeps odd numbers instead of even)."
        ],
        "expected_fix": [
            "1. Change filter condition to 'num % 2 === 0'."
        ],
        "expected_output": "[2, 4, 6]",
        "check": "Expected output: [2, 4, 6]"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function removeDuplicates(arr) {\n    return [...new Set(arr)].sort();\n}\nconsole.log(removeDuplicates([3, 1, 2, 3]));",
        "bug_description": [
            "1. 'sort()' sorts numbers as strings ('[1, 2, 3]' works, but '[10, 2]' becomes '[10, 2]')."
        ],
        "expected_fix": [
            "1. Use '.sort((a, b) => a - b)' to ensure numeric sorting."
        ],
        "expected_output": "[1, 2, 3]",
        "check": "Expected output: [1, 2, 3]"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function sumDigits(num) {\n    let sum = 0;\n    num.toString().split('').forEach(digit => {\n        sum += digit;\n    });\n    return sum;\n}\nconsole.log(sumDigits(123));",
        "bug_description": [
            "1. 'digit' is a string, so sum concatenates instead of adding.",
            "2. Needs to convert 'digit' to a number."
        ],
        "expected_fix": [
            "1. Change 'sum += digit;' to 'sum += Number(digit);'."
        ],
        "expected_output": "6",
        "check": "Expected output: 6"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function factorial(n) {\n    let fact = 1;\n    for (let i = 1; i <= n; i--){\n        fact *= i;\n    }\n    return fact;\n}\nconsole.log(factorial(5));",
        "bug_description": [
            "1. The loop condition causes an infinite loop ('i--' should be 'i++')."
        ],
        "expected_fix": [
            "1. Change 'i--' to 'i++'."
        ],
        "expected_output": "120",
        "check": "Expected output: 120"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function reverseString(str) {\n    return str.split().reverse().join();\n}\nconsole.log(reverseString(\"hello\"));",
        "bug_description": [
            "1. 'split()' without an argument creates an array with the whole string instead of splitting it.",
            "2. 'join()' defaults to commas between characters."
        ],
        "expected_fix": [
            "1. Change 'str.split()' to 'str.split(\"\")'.",
            "2. Change 'join()' to 'join(\"\")'."
        ],
        "expected_output": "\"olleh\"",
        "check": "Expected output: \"olleh\""
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function isPalindrome(str) {\n    return str === str.reverse();\n}\nconsole.log(isPalindrome(\"madam\"));",
        "bug_description": [
            "1. 'reverse()' does not exist on strings, only on arrays."
        ],
        "expected_fix": [
            "1. Change 'str.reverse()' to 'str.split('').reverse().join('')'."
        ],
        "expected_output": "true",
        "check": "Expected output: true"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function findLargest(arr) {\n    let largest = 0;\n    for (let num of arr) {\n        if (num > largest) largest = num;\n    }\n    return largest;\n}\nconsole.log(findLargest([-1, -2, -3, -4]));",
        "bug_description": [
            "1. Initializing 'largest' to 0 causes issues with all-negative arrays."
        ],
        "expected_fix": [
            "1. Initialize 'largest' to 'arr[0]' instead of 0."
        ],
        "expected_output": "-1",
        "check": "Expected output: -1"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function findIndex(arr, target) {\n    arr.forEach((num, index) => {\n        if (num === target) return index;\n    });\n    return -1;\n}\nconsole.log(findIndex([10, 20, 30], 20));",
        "bug_description": [
            "1. 'return' inside 'forEach()' does not stop the function.",
            "2. 'forEach()' does not return values."
        ],
        "expected_fix": [
            "1. Use a 'for' loop instead of 'forEach()'."
        ],
        "expected_output": "1",
        "check": "Expected output: 1"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function countOccurrences(arr, target) {\n    let count = 0;\n    arr.map(num => {\n        if (num === target) count++;\n    });\n    return count;\n}\nconsole.log(countOccurrences([1, 2, 3, 2, 4, 2], 2));",
        "bug_description": [
            "1. 'map()' is not meant for iteration but for transformation."
        ],
        "expected_fix": [
            "1. Use 'forEach()' or 'reduce()' instead of 'map()'."
        ],
        "expected_output": "3",
        "check": "Expected output: 3"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function squareNumbers(arr) {\n    return arr.map(num => num * num).sort();\n}\nconsole.log(squareNumbers([3, 1, 2]));",
        "bug_description": [
            "1. 'sort()' sorts numbers as strings, leading to incorrect ordering."
        ],
        "expected_fix": [
            "1. Use 'sort((a, b) => a - b)'."
        ],
        "expected_output": "[1, 4, 9]",
        "check": "Expected output: [1, 4, 9]"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function mergeArrays(arr1, arr2) {\n    return arr1.concat(arr2).sort();\n}\nconsole.log(mergeArrays([3, 1], [4, 2]));",
        "bug_description": [
            "1. 'sort()' treats numbers as strings, leading to incorrect sorting."
        ],
        "expected_fix": [
            "1. Use 'sort((a, b) => a - b)'."
        ],
        "expected_output": "[1, 2, 3, 4]",
        "check": "Expected output: [1, 2, 3, 4]"
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function getFirstCharacter(str) {\n    return str.charAt;\n}\nconsole.log(getFirstCharacter(\"hello\"));",
        "bug_description": [
            "1. 'charAt' is a function but is being returned as a reference."
        ],
        "expected_fix": [
            "1. Change 'str.charAt' to 'str.charAt(0)'."
        ],
        "expected_output": "\"h\"",
        "check": "Expected output: \"h\""
    },
    {
        "language": "JavaScript",
        "difficulty": "medium",
        "buggy_code": "function multiplyNumbers(a, b) {\n    return a * b;\n}\nconsole.log(multiplyNumbers(2));",
        "bug_description": [
            "1. 'b' is undefined if not passed, leading to NaN."
        ],
        "expected_fix": [
            "1. Provide a default value for 'b' using 'b = 1'."
        ],
        "expected_output": "2",
        "check": "Expected output: 2"
    }
]